
/**
 * Uebungsrunde 7
 *
 * @author Manuel Geier (1126137)
 */
public class AsciiStack {

	private int size;					// current size of the stack
	private AsciiStackNode first;		// points to the first node of the stack

	/**
	 * Creates and initializes the stack
	 * @param increment the capacity of the stack is increased/decreased by this value
	 */
	public AsciiStack() {
		size = 0;
	}
	
	/**
	 * Returns true if the stack is empty, otherwise false
	 * @return true if the stack is empty, otherwise false
	 */
	public boolean empty() {
		return first == null;
	}
	
	/**
	 * Returns the last element within the stack or null if the stack is empty and removes the element from the stack.
	 * @return AsciiImage returns the last element or null if the stack is empty
	 */
	public AsciiImage pop() {
		// return the last element or null if the stack is empty
		if(!empty()) {
			
			AsciiStackNode firstNode = first;		// store the current first node
			first = first.getNext();				// set the new first node
			
			return firstNode.getImage();			// return the image of the stored first node
		} else {
			return null;
		}
	}
	
	/**
	 * Returns the last element or null. The element will not be removed from the stack.
	 * @return AsciiImage returns the last element or null if the stack is empty
	 */
	public AsciiImage peek() {
		// return the last element or null if the stack is empty
		if(!empty()) {
			return imgStack[size-1];
		} else {
			return null;
		}
	}
	
	/**
	 * Adds a new element to the stack.
	 * @param img image to be pushed on the stack
	 */
	public void push(AsciiImage img) {
		// check the capacity of the stack
		if(size >= capacity) {
			increaseStack();
		}
		
		// add the element to the stack and increase the size
		imgStack[size] = img;
		size++;
	}
	
	/**
	 * Retuns the currenct size of the stack
	 * @return size of the stack
	 */
	public int size() {
		return size;
	}
	
	private class AsciiStackNode {
		
		private AsciiImage image;
		private AsciiStackNode next;
		
		public AsciiStackNode(AsciiImage image, AsciiStackNode next) {
			this.image = image;
			this.next = next;
		}
		
		public AsciiImage getImage() {
			return image;
		}
		public AsciiStackNode getNext() {
			return next;
		}
		
	}
}