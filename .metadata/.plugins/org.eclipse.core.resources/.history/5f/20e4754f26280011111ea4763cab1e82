import java.util.List;


/**
 * Grow Operation
 * 
 * @version 7
 * @author Manuel Geier (1126137)
 * 
 */
public class GrowOperation implements Operation {

	private char c;
	
	/**
	 * Creates a new GrowOperation.
	 */
	public GrowOperation(char c) {
		this.c = c;
	}
	
	/**
	 * Executes this GrowOperation and returns as new AsciiImage.
	 * 
	 * @param img
	 *            The AsciiImage to use as basis for executing the Operation, it will remain
	 *            unchanged
	 * @return A new AsciiImage reflecting the result of the executed Operation
	 */
	public AsciiImage execute(AsciiImage img) {

		String charset = img.getCharset();
		char brightestChar = charset.charAt(charset.length()-1);

		AsciiImage result = new AsciiImage(img);

		// clear all pixels
		for (int y = 0; y < result.getHeight(); y++) {
			for (int x = 0; x < result.getWidth(); x++) {
				result.setPixel(x, y, brightestChar);
			}
		}

		return result;

	}
	
	/**
	 * Grows empty pixels around a specified character.
	 * 
	 * @param c character to search for
	 */
	public void growRegion(AsciiImage img, char c) {
		// get the pixel list for the specified character
		List<AsciiPoint> pList = getPointList(c);
		
		int x,y;
		for(AsciiPoint p: pList) {
			
			x = p.getX();
			y = p.getY();
		
			// search left
			if(x-1 >= 0 && EMPTY_PIXEL.equals(getPixel(x-1, y))) {
				setPixel(x-1, y, c);
			}
			
			// search right
			if(x+1 < imageWidth && EMPTY_PIXEL.equals(getPixel(x+1, y))) {
				setPixel(x+1, y, c);
			}
			
			// search above
			if(y-1 >= 0 && EMPTY_PIXEL.equals(getPixel(x, y-1))) {
				setPixel(x, y-1, c);
			}
			
			// search below
			if(y+1 < imageHeight && EMPTY_PIXEL.equals(getPixel(x, y+1))) {
				setPixel(x, y+1, c);
			}
		}
	}

}
