import java.util.ArrayList;

/**
 * Uebungsrunde 7
 *
 * @author Manuel Geier (1126137)
 */
public class AsciiImage {
	
	private char[][] image;							// array for the image
	private int imageWidth;							// image height attribute
	private int imageHeight;						// image width attribute
	private String charset;							// valid charset of the image
	private static Character EMPTY_PIXEL = '.';		// empty pixel character
	
	/**
	 * Create a new AsciiImage with specified width and height
	 * 
	 * @param width width of the image
	 * @param height height of the image
	 */
	public AsciiImage(int width, int height, String charset) {
		if(width >= 0) {
			throw new IllegalArgumentException("width must be > 0: " + width);
		}
		if(height >= 0) {
			throw new IllegalArgumentException("height must be > 0: " + height);
		}
		if(!isCharsetValid(charset)) {
			throw new IllegalArgumentException("charset is empty or contains double values: " + charset);
		}
		
		
		image = new char[height][width];
		imageWidth = width;
		imageHeight = height;
		// TODO clear image
	}
	
	/**
	 * Creates a copy of the specified AsciiImage
	 * 
	 * @param img AsciiImage base
	 */
	public AsciiImage(AsciiImage img) {
		imageWidth = img.imageWidth;
		imageHeight = img.imageHeight;
		image = new char[imageHeight][imageWidth];
		
		// copy image array
		for(int y = 0; y < imageHeight; y++) {
			for(int x = 0; x < imageWidth; x++) {
				image[y][x] = img.image[y][x];
			}
		}
	}
	
	/**
	 * Returns width of the image
	 * 
	 * @return width of the image
	 */
	public int getWidth() {
		return imageWidth;
	}
	
	/**
	 * Returns height of the image
	 * 
	 * @return height of the image
	 */
	public int getHeight() {
		return imageHeight;
	}
	
	/**
	 * Returns image representation as String
	 * 
	 * @return string reprepresentation of the image
	 */
	public String toString() {
		StringBuilder builder = new StringBuilder();
		
		for(int y = 0; y < imageHeight; y++) {
			for(int x = 0; x < imageWidth; x++) {
				builder.append(image[y][x]);
			}
			builder.append("\n");
		}
		
		return builder.toString();
	}
	
	/**
	 * Returns character at x, y position of the image
	 * 
	 * @param x x position
	 * @param y y position
	 * @return character at position
	 */
	public char getPixel(int x, int y) throws IndexOutOfBoundsException {
		if(!isXValid(x)) {
			throw new IndexOutOfBoundsException("x: " + x);
		}
		if(!isYValid(y)) {
			throw new IndexOutOfBoundsException("y: " + y);
		}
		
		return image[y][x];
	}
	
	/**
	 * Returns character at AsciiPoint position of the image
	 * 
	 * @param p AsciiPoint position
	 * @return character at position
	 */
	public char getPixel(AsciiPoint p) throws IndexOutOfBoundsException {
		return getPixel(p.getX(), p.getY());
	}

	/**
	 * Sets character at x, y position of the image
	 * 
	 * @param x x position
	 * @param y y position
	 * @param c new character
	 */
	public void setPixel(int x, int y, char c) throws IndexOutOfBoundsException {
		if(!isXValid(x)) {
			throw new IndexOutOfBoundsException("x: " + x);
		}
		if(!isYValid(y)) {
			throw new IndexOutOfBoundsException("y: " + y);
		}
		
		image[y][x] = c;
	}
	
	/**
	 * Sets character at AsciiPoint position of the image
	 * 
	 * @param p AsciiPoint position
	 * @param c new character
	 */
	public void setPixel(AsciiPoint p, char c) throws IndexOutOfBoundsException {
		setPixel(p.getX(), p.getY(), c);
	}
	
	/**
	 * Returns a list of AsciiPoint where the character c is placed
	 * 
	 * @param c character to search for
	 * @return List of AsciiPoints
	 */
	public ArrayList<AsciiPoint> getPointList(char c) {
		ArrayList<AsciiPoint> pList = new ArrayList<AsciiPoint>();
		
		// iterate through all pixels and search for the caracter
		// if found, add it to the list
		for(int y = 0; y < imageHeight; y++) {
			for(int x = 0; x < imageWidth; x++) {
				if(image[y][x] == c) {
					pList.add(new AsciiPoint(x,y));
				}
			}
		}
		
		return pList;
	}
	
	/**
	 * Replaces a character with another one.
	 * 
	 * @param oldChar old character
	 * @param newChar new character which replaces the old one
	 */
	public void replace(char oldChar, char newChar) {
		for(int y=0; y < imageHeight; y++) {
			for(int x=0; x < imageWidth; x++) {
				if(getPixel(x,y) == oldChar) {
					setPixel(x, y, newChar);
				}
			}
		}
	}
	
	private boolean isXValid(int x) {
		return (x >= 0 && x < imageWidth);
	}
	
	private boolean isYValid(int y) {
		return (y >= 0 && y < imageHeight);
	}
	
	private boolean isCharsetValid(String charset) {
		
	}

}