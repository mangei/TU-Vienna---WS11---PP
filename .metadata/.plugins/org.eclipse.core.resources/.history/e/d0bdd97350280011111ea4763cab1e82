import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;


/**
 * Median Operation
 * 
 * @version 9
 * @author Manuel Geier (1126137)
 * 
 */
public class MedianOperation extends FilterOperation {

	/**
	 * Creates a new MedianOperation.
	 */
	public MedianOperation() {
	}
	
	/**
	 * führt mit dem übergebenen Block den Medianfilter aus. Die Pixel des Blocks werden 
	 * nach ihrem Helligkeitswert sortiert. Der Median (also das in der sortierten Liste 
	 * in der Mitte stehende Zeichen) für diesen Block wird als Ergebnis zurückgegeben.
	 * 
	 * @param values
	 * @return
	 */
	public int filter(int[] values) {
		
		List<Character> pixelList = new ArrayList<Character>();
		for(int i : values) {
			pixelList.add((char)i);
		}
		
		// order list
		Collections.sort(pixelList, new MedianPixelComparator(getImage().getCharset()));
		
		// return center pixel
		return pixelList.get(4);
	}
	
	/**
	 * Returns the calculated median pixel color out of the image for the position.
	 * 
	 * @param img
	 * 			original image
	 * @param x
	 * 			x-position
	 * @param y
	 * 			y-position
	 * @return Returns the calculated median pixel color out of the image for the position.
	 */
	private char getMedianPixel(AsciiImage img, int x, int y) {
		
		// get all 9 pixel
		List<Character> pixelList = new ArrayList<Character>(9);
		for(int imgY = -1; imgY <= 1; imgY++) {
			for(int imgX = -1; imgX <= 1; imgX++) {
				pixelList.add(getPixel(img,x+imgX,y+imgY));
			}
		}
		
		// order list
		Collections.sort(pixelList, new MedianPixelComparator(img.getCharset()));
		
		// return center pixel
		return pixelList.get(4);
	}
	
	/**
	 * Returns the pixel at the x- and y-position of the image. If the positions are
	 * outside of the image, the brightest color of the image charset will be returned.
	 * 
	 * @param img 
	 * 			original image
	 * @param x
	 * 			x position
	 * @param y
	 * 			y position
	 * @return pixel at the position or the brightest color
	 */
	private char getPixel(AsciiImage img, int x, int y) {
		if(x >= 0 && x < img.getWidth() && y >= 0 && y < img.getHeight()) {
			return img.getPixel(x, y);
		} else {
			return img.getCharset().charAt(img.getCharset().length()-1);
		}
	}
	
	/**
	 * Comparator to sort the median pixel list.
	 * 
	 * @version 7
	 * @author Manuel Geier (1126137)
	 *
	 */
	private class MedianPixelComparator implements Comparator<Character> {
		
		private String charset;
		
		/**
		 * Creates an MedianPixelComparator
		 * 
		 * @param charset
		 * 			original charset
		 */
		public MedianPixelComparator(String charset) {
			this.charset = charset;
		}
		
		@Override
		public int compare(Character ch1, Character ch2) {
			int idx1 = charset.indexOf(ch1);
			int idx2 = charset.indexOf(ch2);
			
			if(idx1 < idx2) {
				return -1;
			} else if(idx1 > idx2) {
				return 1;
			} else {
				return 0;
			}
		}
		
	}
}
