import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;


/**
 * Diese abstrakte Klasse beinhaltet die Funktionalität, um das Bild zu durchlaufen und für 
 * jeden Pixel den benötigten Block an Nachbarpixeln zu bestimmen. Sie bietet mit der Methode 
 * filter eine Schablone (Template) für die konkreten Filter Operationen.
 * 
 * @version 9
 * @author Manuel Geier (1126137)
 * 
 */
public abstract class FilterOperation implements Operation {

	private AsciiImage img;
	
	/**
	 * Konstruktor der FilterOperation.
	 */
	public FilterOperation() {
	}

	/**
	 * führt den Blockfilter aus. Diese Methode muss von abgeleiteten Klassen nicht überschrieben 
	 * werden. Die Methode durchläuft das Bild, bestimmt für jeden Pixel den Block an Nachbarpixeln 
	 * und ruft damit dann die Methode filter auf. Das Ergebnis dieser Methode wird dann als neuer 
	 * Pixel an der aktuellen Stelle gesetzt.
	
	 * 
	 * @param img
	 *            The AsciiImage to use as basis for executing the Operation, it will remain
	 *            unchanged
	 * @return A new AsciiImage reflecting the result of the executed Operation
	 */
	public AsciiImage execute(AsciiImage img) {

		this.img = img;
		
		AsciiImage result = new AsciiImage(img);

		// calculate and set the median pixel for the whole image
		for(int y = 0, h = img.getHeight(); y < h; y++) {
			for(int x = 0, w = img.getWidth(); x < w; x++) {
				result.setPixel(x, y, filter(img, x, y));
			}
		}
		
		return result;
	}
	
	/**
	 * muss von den abgeleiteten Klassen implementiert werden. Sie führt die eigentliche 
	 * Logik des Filters durch. Das übergebene Array umfasst die Helligkeitswerte der Pixel 
	 * im Block Zeile für Zeile. Diese Methode gibt den berechneten Helligkeitswert für den 
	 * neuen Pixel zurück.
	 * 
	 * @param values
	 * @return
	 */
	public abstract int filter(int[] values);
	
	/**
	 * Returns the calculated neighbor pixel colors out of the image for the position.
	 * 
	 * @param img
	 * 			original image
	 * @param x
	 * 			x-position
	 * @param y
	 * 			y-position
	 * @return Returns the calculated median pixel color out of the image for the position.
	 */
	private char getNeighborPixel(AsciiImage img, int x, int y) {
		
		// get all 9 pixel
		List<Character> pixelList = new ArrayList<Character>(9);
		for(int imgY = -1; imgY <= 1; imgY++) {
			for(int imgX = -1; imgX <= 1; imgX++) {
				pixelList.add(getPixel(img,x+imgX,y+imgY));
			}
		}
		
		return pixelList.toArray(Character.class);
	}
	
	/**
	 * Returns the pixel at the x- and y-position of the image. If the positions are
	 * outside of the image, the brightest color of the image charset will be returned.
	 * 
	 * @param img 
	 * 			original image
	 * @param x
	 * 			x position
	 * @param y
	 * 			y position
	 * @return pixel at the position or the brightest color
	 */
	private char getPixel(AsciiImage img, int x, int y) {
		if(x >= 0 && x < img.getWidth() && y >= 0 && y < img.getHeight()) {
			return img.getPixel(x, y);
		} else {
			return img.getCharset().charAt(img.getCharset().length()-1);
		}
	}
	
	protected AsciiImage getImage() {
		
	}
}
